/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var hli = ee.Image("CSP/ERGo/1_0/US/CHILI"),
    tpi = ee.Image("CSP/ERGo/1_0/US/mTPI"),
    topo_div = ee.Image("CSP/ERGo/1_0/US/topoDiversity"),
    landforms = ee.Image("CSP/ERGo/1_0/US/landforms");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// GEE code for topographic indices:

// Latitude and longitude
var latlong = ee.Image.pixelLonLat(); 

// // Topography
var elevation = ee.Image('USGS/NED').rename('elev').resample('bicubic')
var aspect = ee.Terrain.aspect(elevation).multiply(Math.PI/180).rename('aspect') // linear aspect
var northness = aspect.cos().rename('northness')
var eastness = aspect.sin().rename('eastness')
var slope = ee.Terrain.slope(elevation)

// Stage 1975: slope% * cos or sin of aspect
var slope_pct = slope.expression("tan(b(0) * pi/180)", {"pi": Math.PI}).rename("slope_pct")
var slope_pct = slope_pct.where(slope_pct.gt(1), 1.01)

var slope_east = slope_pct.multiply(eastness).rename('slope_east')
var slope_north = slope_pct.multiply(northness).rename('slope_north')

// TRASP - Roberts and Cooper 1989
var trasp = aspect.expression("(1-(cos(b(0)-d))) / 2", {"d":(30 * Math.PI/180)}).rename("trasp")

// Topographic position index
// var tpi90 = elevation.subtract(elevation.focal_mean(radius=90, units='meters')).rename('tpi90')
// var tpi990 = elevation.subtract(elevation.focal_mean(radius=990, units='meters')).rename('tpi990')
// print(tpi990)

// Indices from Theobald and CSP
// mtpi = ee.Image('CSP/ERGo/1_0/US/mTPI').rename('mtpi').resample('bicubic')
var chili = ee.Image('CSP/ERGo/1_0/US/CHILI').rename('chili').resample('bicubic')
var tdiv = ee.Image('CSP/ERGo/1_0/US/topoDiversity').rename('tdiv').resample('bicubic')
// physd = ee.Image('CSP/ERGo/1_0/US/physioDiversity').rename('physd').resample('bicubic')

// add topographic bands to the image
var topo = ee.Image.cat(elevation, northness, eastness, slope_pct, slope_east, slope_north, trasp, tpi90, tpi990, chili, tdiv)
var topo_bands = topo.bandNames().getInfo()
