/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Daymet = ee.ImageCollection("NASA/ORNL/DAYMET_V3"),
    GBbounds = ee.FeatureCollection("users/ericjensen41_default/Thesis/Project_Boundaries/LIIIGBBoundary");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Variables of interest:
// -------- Temperature 
// Mean temperature: October-September  -Done
// Spring temperature: March-May  -Done
// Summer temperature: June-August -Done
// Winter temperature: November-February -Done
// Growing season temperature: March-September -Done
// Mean summer maximum temperature - Done
// Mean winter minimum temperature - Done
// -------- Precipitation
// Mean annual precip: October-September (water year) - Done
// Spring precip: April-May - Done
// Summer precip: July-August - Done
// Winter preciptiation November-February - Done
// Growing season precip: March-September  - Done
// -------- Others:
// Frost free period: Length of the frost-free period (days) - Done
// Julian date of the last freezing date of spring - Done
// Julian date of the first freezing date of autumn - Done
// Mean maximum SWE - Done
// Degree-days >5 degrees C - Done
// Degree-days <0 degrees C - Done
// Degree-days >5 degrees C accumulating within the frost-free period - Done
// Annual Dryness index: dd5/map or sqrt(dd5)/map (once named ami annual moisture index) - Done
// Summer Dryness index: gsdd5/gsp or sqrt(gsdd5)/gsp (once named smi, summer moisture index) - Done

// Link to the Rehfeldt model document: https://www.fs.fed.us/rm/pubs/rmrs_gtr165.pdf


//  #################################################
// ------------ Preprocess layers -------------------
// Bounding box to clip by
var GBbounds_f = ee.Feature(GBbounds.first())
var GBbb = GBbounds_f.bounds().geometry()

// Add a mean temperature band
var calc_tmean = function(img){
      var tmean = img.expression(
        '(tmax + tmin) / 2', {
          'tmax': img.select('tmax'),
          'tmin': img.select('tmin')}).rename('tmean')
      var imgSmean = img.addBands(tmean)
      return(imgSmean)
}
var Daymet = Daymet.map(calc_tmean)

// Add a binary band for frost free pixels for each date
//  1 = frost-free, 0 = fros
var calc_frostfree = function(img){
  var frostfree = img.select('tmin').gte(0).rename('frostfree')
  var img_wFF = img.addBands(frostfree)
  return(img_wFF)
}

var Daymet = Daymet.map(calc_frostfree)

// Add day of year band
var addDate = function(image){
  var doy = image.date().getRelative('day', 'year');
  var doyBand = ee.Image.constant(doy).uint16().rename('doy')
  doyBand = doyBand.updateMask(image.select('prcp').mask())
  
  return image.addBands(doyBand);
};
var Daymet = Daymet.map(addDate)




// ------------ Temporal sequence -------------------
// Filter to 30 year period
var startDate = '1989-01-01'
var endDate = '2020-01-01'
var DM = Daymet.filterDate(startDate,endDate).filterBounds(GBbb).select('prcp', 'tmean', 'swe', 'tmin', 'tmax', 'frostfree', 'doy')

// Define start and end years for calculation
var startYear = 1990;
var endYear = 2019;

// Make a list of years to generate composites for.
var yearList = ee.List.sequence(startYear, endYear);




// ##########################################################
// ------------ Seasonal calendar filters -------------------
// Spring filter
var filterSpr = ee.Filter.calendarRange(3, 5, 'month')

// Summer filter
var filterSum = ee.Filter.calendarRange(6, 8, 'month')

// Winter filter
var filterWin = ee.Filter.calendarRange(11, 2, 'month')

// Growing season filter
var filterGrS = ee.Filter.calendarRange(4, 10, 'month')

// Last spring frost filter // January - July
var filterSprF = ee.Filter.calendarRange(1, 7, 'month')

// First autumn frost filter // August - December
var filterAutF = ee.Filter.calendarRange(8, 12, 'month')


// ##########################################################
// ------------ Calculate 30-year means -------------------

// ------------ Calculate precipitation -------------------
// Annual precipitation (MAP)
var MAP = DM.select('prcp').reduce(ee.Reducer.sum()).divide(30).rename('MAP').clip(GBbb)

// Spring precipitation (SprP)
var Spr_IC = DM.filter(filterSpr)
var SprP = Spr_IC.select('prcp').reduce(ee.Reducer.sum()).divide(30).rename('SprP').clip(GBbb)

// Summer precipitation (SumP)
var Sum_IC = DM.filter(filterSum)
var SumP = Sum_IC.select('prcp').reduce(ee.Reducer.sum()).divide(30).rename('SumP').clip(GBbb)

// Growing season precipitation (GrSP)
var GrS_IC = DM.filter(filterGrS)
var GrSP = GrS_IC.select('prcp').reduce(ee.Reducer.sum()).divide(30).rename('GrSP').clip(GBbb)

// Winter precipitation (WinP)
var Win_IC = DM.filter(filterWin)
var WinP = Win_IC.select('prcp').reduce(ee.Reducer.sum()).divide(30).rename('WinP').clip(GBbb)




// ------------ Calculate temperature ---------------------
//  Mean temperature (MT)
var MT = DM.select('tmean').reduce(ee.Reducer.mean()).rename('MT').clip(GBbb)

// Mean spring temperature (SprT)
var SprT = Spr_IC.select('tmean').reduce(ee.Reducer.mean()).rename('SprT').clip(GBbb)

// Mean summer temperature (SumT)
var SumT = Sum_IC.select('tmean').reduce(ee.Reducer.mean()).rename('SumT').clip(GBbb)

// Growing season temperature (GrST)
var GrST = GrS_IC.select('tmean').reduce(ee.Reducer.mean()).rename('GrST').clip(GBbb)

// Mean winter temperature (WinT)
var WinT = Win_IC.select('tmean').reduce(ee.Reducer.mean()).rename('WinT').clip(GBbb)



// ------------ Calculate seasonal extreme temperatures -------------------
// ##### Mean summer maximum (SumMaxT) #####
// Reducer for image collection to annual maximum
var SumMaxTReducer = ee.Reducer.max();

// Map reducer over the list of years to generate image collections of annual maximum images from November (previous year) to April (current year)
// Stack exchange: https://gis.stackexchange.com/questions/340433/making-intra-annual-image-composites-for-a-series-of-years-in-google-earth-engin
var SumMaxTCol = ee.ImageCollection(yearList.map(function(year){
  var year_num = ee.Number(year)
  var startdate = '-06-01' // Start in November
  var enddate = '-10-01'// End in April
  var yearCol = DM.filterDate(ee.String(year_num.toInt()).cat(startdate), ee.String(year_num.toInt()).cat(enddate)).select("tmax");
  var yearComp = yearCol.reduce(SumMaxTReducer).clip(GBbb);
  return yearComp.set({
    'year': year});
}));

// Create image of mean summer maximum temperatures
var SumMaxT = SumMaxTCol.reduce(ee.Reducer.mean())
// print(SumMaxT)
// Map.addLayer(SumMaxT, {min:25, max:45}, 'SumMax')


// ##### Mean winter minimum (WinMaxT) #####
// Reducer for image collection to annual minimum
var WinMinTReducer = ee.Reducer.min();

// Map reducer over the list of years to generate image collections of annual maximum images from November (previous year) to April (current year)
// Stack exchange: https://gis.stackexchange.com/questions/340433/making-intra-annual-image-composites-for-a-series-of-years-in-google-earth-engin
var WinMinTCol = ee.ImageCollection(yearList.map(function(year){
  var year_num = ee.Number(year)
  var startdate = '-11-01' // Start in November
  var enddate = '-04-01'// End in April
  var yearCol = DM.filterDate(ee.String(year_num.subtract(1).toInt()).cat(startdate), ee.String(year_num.toInt()).cat(enddate)).select("tmin");
  var yearComp = yearCol.reduce(WinMinTReducer).clip(GBbb);
  return yearComp.set({
    'year': year});
}));

// Create image of mean winter minimum temperatures
var WinMinT = WinMinTCol.reduce(ee.Reducer.mean())




// ------------ Calculate frost free period, last frost and first frost -------------------
// Mask pixels with 'tmin' < 0 and keep only pixels when frost occurred and only the DOY band
var DM_frost  = DM.map(function(image){
  return image.updateMask(image.select('tmin').lt(0)).select('doy');
});

// Filter by date to create spring frost and autumn frost collections
var SprFCol = DM_frost.filter(filterSprF)
var AutFCol = DM_frost.filter(filterAutF)

// Define reducers for last spring frost and first autumn frost
var SprFReducer = ee.Reducer.lastNonNull();
var AutFReducer = ee.Reducer.firstNonNull();

// Map reducer over the list of years to generate image collections for spring and autumn frost with a composite for each year.
// Stack exchange: https://gis.stackexchange.com/questions/340433/making-intra-annual-image-composites-for-a-series-of-years-in-google-earth-engin
var SprFCol = ee.ImageCollection(yearList.map(function(year){
  var yearCol = SprFCol.filter(ee.Filter.calendarRange(year, year, 'year'));
  var yearComp = yearCol.reduce(SprFReducer).clip(GBbb);
  return yearComp.set({
    'year': year});
}));

var AutFCol = ee.ImageCollection(yearList.map(function(year){
  var yearCol = AutFCol.filter(ee.Filter.calendarRange(year, year, 'year'));
  var yearComp = yearCol.reduce(AutFReducer).clip(GBbb);
  return yearComp.set({
    'year': year});
}));

// Reduce Spring and Autumn frost image collections to produce the 30-year mean image
var SprF = SprFCol.reduce(ee.Reducer.mean())
var AutF = AutFCol.reduce(ee.Reducer.mean())
// Calculate mean frost free period to produce the 30-year mean image
var FFree = AutF.subtract(SprF)





// ------------- Calculate growing degree days ------------------------

// ------------- Greater than 5-degree days within the frost free period
// Function to filter and calculate 5-degree-days for each day during frost free period
var calc_dd5_ff = function(img){
  //  Add degree day band
  var dd5 = ee.Image(img.select('tmean').subtract(5)).rename(['dd5ff']) // 5-degree-day calculation
  var img_dd5 = img.addBands(dd5).select(['doy', 'dd5ff']) // add 5-degree-day band to image 
  
  // Filter dd5 values lt 0
  var dd5_gte0_mask = img_dd5.select('dd5ff').gte(0) // Mask pixels of dd5 less than 0
  var img_dd5_clean = img_dd5.updateMask(dd5_gte0_mask) // Apply mask
  
  var SprF_mask = img_dd5_clean.select('doy').gt(SprFCol.first()) // filter pixels based on doy < doy of last spring frost
  var AutF_mask = img_dd5_clean.select('doy').lt(AutFCol.first()) // filter pixels based on doy < doy of first autumn frost
  var img_dd5_ff = img_dd5_clean.updateMask(SprF_mask).updateMask(AutF_mask) // apply masks to image to create frostfree image
  
  return img_dd5_ff
}

// Reducer for image collection to annual sum
var DD5Reducer = ee.Reducer.sum();

// Map degree day filtering function and sum reducer over annual image collection to produce annual accumulations of 5-degree-days during frost free period
// Stack exchange: https://gis.stackexchange.com/questions/340433/making-intra-annual-image-composites-for-a-series-of-years-in-google-earth-engin
var DD5ffCol = ee.ImageCollection(yearList.map(function(year){
  var year_num = ee.Number(year)
  var startdate = '-01-01' // Entire year
  var enddate = '-01-01'// Entire year
  var yearCol = DM.filterDate(ee.String(year_num.toInt()).cat(startdate), ee.String(year_num.add(1).toInt()).cat(enddate)); // filter by dates
  var DD5Col = yearCol.map(calc_dd5_ff) // Map DD5 calculation function over annual image collection
  var yearComp = DD5Col.reduce(DD5Reducer).clip(GBbb) // summing reducer to return image of accumulated degree days
  return yearComp.set({
    'year': year});
}));

// Calculate 30-year mean
var DD5ff = DD5ffCol.reduce(ee.Reducer.mean()).select('dd5ff_sum_mean')

// print(DD5ff)
// Map.addLayer(DD5ff, {min: 300, max: 2000}, 'dd5ff')




// ------------- Greater than 5-degree days, no constraint on frost free period
// Function to filter and calculate 5-degree-days for each day
var calc_dd5 = function(img){
  //  Add degree day band
  var dd5 = ee.Image(img.select('tmean').subtract(5)).rename(['dd5']) // 5-degree-day calculation
  var img_dd5 = img.addBands(dd5).select(['doy', 'dd5']) // add 5-degree-day band to image 
  
  // Filter dd5 values lt 0
  var dd5_gte0_mask = img_dd5.select('dd5').gte(0) // Mask pixels of dd5 less than 0
  var img_dd5_clean = img_dd5.updateMask(dd5_gte0_mask) // Apply mask
  
  return img_dd5_clean
}

// Reducer for image collection to annual sum
var DD5Reducer = ee.Reducer.sum();

// Map degree day filtering function and sum reducer over annual image collection to produce annual accumulations of 5-degree-days
// Stack exchange: https://gis.stackexchange.com/questions/340433/making-intra-annual-image-composites-for-a-series-of-years-in-google-earth-engin
var DD5Col = ee.ImageCollection(yearList.map(function(year){
  var year_num = ee.Number(year)
  var startdate = '-01-01' // Entire year
  var enddate = '-01-01'// Entire year
  var yearCol = DM.filterDate(ee.String(year_num.toInt()).cat(startdate), ee.String(year_num.add(1).toInt()).cat(enddate)); // filter by dates
  var DD5Col = yearCol.map(calc_dd5) // Map DD5 calculation function over annual image collection
  var yearComp = DD5Col.reduce(DD5Reducer).clip(GBbb) // summing reducer to return image of accumulated degree days
  return yearComp.set({
    'year': year});
}));

// Calculate 30-year mean
var DD5 = DD5Col.reduce(ee.Reducer.mean()).select('dd5_sum_mean')

// print(DD5)
// Map.addLayer(DD5, {min: 300, max: 2000}, 'dd5')





// ------------- Less than 0-degree days, no constraint on frost-free period
// Function to filter and calculate 0-degree-days for each day
var calc_dd0 = function(img){
  //  Add degree day band
  var dd0 = ee.Image(img.select('tmean').subtract(0)).rename(['dd0']) // 0-degree-day calculation - no calculation needed
  var img_dd0 = img.addBands(dd0).select(['doy', 'dd0']) // add 0-degree-day band to image 
  
  // Filter dd0 values gt 0
  var dd0_lte0_mask = img_dd0.select('dd0').lte(0) // Mask pixels of dd0 greater than 0
  var img_dd0_clean = img_dd0.updateMask(dd0_lte0_mask) // Apply mask
  
  // Convert negative values to absolute values (degree days)
  var img_dd0_abs = img_dd0_clean.abs()
  
  return img_dd0_abs
}

// Reducer for image collection to annual sum
var DD0Reducer = ee.Reducer.sum();

// Map degree day filtering function and sum reducer over annual image collection to produce annual accumulations of 5-degree-days
// Stack exchange: https://gis.stackexchange.com/questions/340433/making-intra-annual-image-composites-for-a-series-of-years-in-google-earth-engin
var DD0Col = ee.ImageCollection(yearList.map(function(year){
  var year_num = ee.Number(year)
  var startdate = '-10-01' // Entire year
  var enddate = '-10-01'// Entire year
  var yearCol = DM.filterDate(ee.String(year_num.subtract(1).toInt()).cat(startdate), ee.String(year_num.toInt()).cat(enddate)); // filter by dates
  var DD0Col = yearCol.map(calc_dd0) // Map DD5 calculation function over annual image collection
  var yearComp = DD0Col.reduce(DD0Reducer).clip(GBbb) // summing reducer to return image of accumulated degree days
  return yearComp.set({
    'year': year});
}));

// Calculate 30-year mean
var DD0 = DD0Col.reduce(ee.Reducer.mean()).select('dd0_sum_mean')

// print(DD0)
// Map.addLayer(DD0, {min: 0, max: 800}, 'dd0')





// ------------- Calculate dryness indices
// ##### Annual dryness index #####
var adi = ee.Image(DD5.divide(MAP))

// ##### Summer dryness index #####
var sdi = ee.Image(DD5ff.divide(GrSP))


// Map.addLayer(adi, {min:0, max:30}, 'adi')
// Map.addLayer(sdi, {min:0, max:30}, 'sdi')




// ------------- Calculate mean maximum snow water equivalent
// Reducer for image collection to annual maximum
var SWEReducer = ee.Reducer.max();

// Map reducer over the list of years to generate image collections of annual maximum images from November (previous year) to April (current year)
// Stack exchange: https://gis.stackexchange.com/questions/340433/making-intra-annual-image-composites-for-a-series-of-years-in-google-earth-engin
var SWECol = ee.ImageCollection(yearList.map(function(year){
  var year_num = ee.Number(year)
  var startdate = '-11-01' // Start in November
  var enddate = '-04-01'// End in April
  var yearCol = DM.filterDate(ee.String(year_num.subtract(1).toInt()).cat(startdate), ee.String(year_num.toInt()).cat(startdate)).select("swe");
  var yearComp = yearCol.reduce(SWEReducer).clip(GBbb);
  return yearComp.set({
    'year': year});
}));

var SWE = SWECol.reduce(ee.Reducer.mean())




// ------------ Visualize data--------------
//  Visualization parameters for temperature data
var pParams = {
  min: 100,
  max: 800,
  palette: ['8B4513','ffffff','00ff00']
};
var tParams = {
  min: 0,
  max: 20,
  palette: ['113EDA','ffffff','CF523F']
};

var ffParams = {
  min: -300,
  max: -175,
  palette: ['113EDA','ffffff','CF523F']
};
Map.addLayer(GBbounds, {}, 'GBbounds',false)
// Map.addLayer(MAP, pParams, 'MAP',false)
// Map.addLayer(MT, tParams, 'MT',false)

// Map.addLayer(diffDays, ffParams, 'ff',false)