/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var GBbounds = ee.FeatureCollection("users/ericjensen41_default/Thesis/Project_Boundaries/LIIIGBBoundary");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// ----------- Preprocess Data -------------------------------
// -----------------------------------------------------------

// Load a collection of Landsat TOA reflectance images.
var L8Collection = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR');
var L7Collection = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR');
var L5Collection = ee.ImageCollection("LANDSAT/LT05/C01/T1_SR");

// Mask clouds for Landsat 5 and 7
// Keep only clear and low confidence cloud pixels
// Mask fill,  water, cloud shadow, snow, and medium and high cloud confidence clouds
// Link to Document: https://prd-wret.s3-us-west-2.amazonaws.com/assets/palladium/production/atoms/files/LSDS-1370_L4-7_SurfaceReflectance-LEDAPS_ProductGuide-v2.pdf
var maskL57 = function(image){
  var fillBitMask = 1
  var clearBitMask = 1 << 1
  var waterBitMask = 1 << 2
  var cloudShadowBitMask = 1 << 3
  var snowBitMask = 1 << 4
  var cloudConfBitMask = 1 << 7
  
  var ls_bands = ee.List(['B1', 'B2', 'B3', 'B4', 'B5', 'B7', 'pixel_qa'])
  var pixelqa_name = 'pixel_qa'
  
  // Get the pixel QA band
  var pixelqa = image.select(pixelqa_name) 
  
  var mask = pixelqa.bitwiseAnd(fillBitMask).eq(0)
        .and(pixelqa.bitwiseAnd(clearBitMask).neq(0))
        .and(pixelqa.bitwiseAnd(waterBitMask).eq(0))
        .and(pixelqa.bitwiseAnd(cloudShadowBitMask).eq(0))
        .and(pixelqa.bitwiseAnd(snowBitMask).eq(0))
        .and(pixelqa.bitwiseAnd(cloudConfBitMask).eq(0))      
              
// Return the masked image (excluding the PIXELQA and STQA layers)
  return image.updateMask(mask).select(ls_bands)  }
  
var L5Collection = L5Collection.map(maskL57)
var L7Collection = L7Collection.map(maskL57)

// Mask clouds for Landsat 8
// Keep only clear and low confidence cloud pixels and low confidence cirrus pixels
// Mask fill,  water, cloud shadow, snow, terrain occlusion, medium and high cirrus confidence, and medium and high cloud confidence clouds
// Link to Document: https://prd-wret.s3-us-west-2.amazonaws.com/assets/palladium/production/atoms/files/LSDS-1368_L8_SurfaceReflectanceCode-LASRC_ProductGuide-v2.pdf
var maskL8 = function(image){
  var fillBitMask = 1
  var clearBitMask = 1 << 1
  var waterBitMask = 1 << 2
  var cloudShadowBitMask = 1 << 3
  var snowBitMask = 1 << 4
  var cloudConfBitMask = 1 << 7
  var cirrusConfBitMask = 1 << 9
  var occlusionBitMask = 1 << 10
  
  var ls_bands = ee.List(['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'pixel_qa'])
  var pixelqa_name = 'pixel_qa'
  
  // Get the pixel QA band
  var pixelqa = image.select(pixelqa_name)
  
  var mask = pixelqa.bitwiseAnd(fillBitMask).eq(0)
        .and(pixelqa.bitwiseAnd(clearBitMask).neq(0))
        .and(pixelqa.bitwiseAnd(waterBitMask).eq(0))
        .and(pixelqa.bitwiseAnd(cloudShadowBitMask).eq(0))
        .and(pixelqa.bitwiseAnd(snowBitMask).eq(0))
        .and(pixelqa.bitwiseAnd(cloudConfBitMask).eq(0))
        .and(pixelqa.bitwiseAnd(cirrusConfBitMask).eq(0))
        .and(pixelqa.bitwiseAnd(occlusionBitMask).eq(0))     
              
// Return the masked image (excluding the PIXELQA and STQA layers)
  return image.updateMask(mask).select(ls_bands)  }
  
var L8Collection = L8Collection.map(maskL8)

// Match OLI bands to ETM and TM
var matchBands = function(image){
  return image.select(['B2', 'B3', 'B4', 'B5', 'B6', 'B7'], ['B1', 'B2', 'B3', 'B4', 'B5', 'B7'])  }
var L8Collection = L8Collection.map(matchBands)

var landsatCollection = L5Collection.merge(L7Collection).merge(L8Collection).filterBounds(GBbounds)

// Set the region of interest to a point.
var roi = ee.Geometry.Point([-117.7700700, 39.6448900]);

// The dependent variable we are modeling.
var dependent = 'NDVI';

// The number of cycles per year to model.
var harmonics = 1;

// Make a list of harmonic frequencies to model.
// These also serve as band name suffixes.
var harmonicFrequencies = ee.List.sequence(1, harmonics);

// Function to get a sequence of band names for harmonic terms.
var constructBandNames = function(base, list) {
  return ee.List(list).map(function(i) {
    return ee.String(base).cat(ee.Number(i).int());
  });
};

// Construct lists of names for the harmonic terms.
var cosNames = constructBandNames('cos_', harmonicFrequencies);
var sinNames = constructBandNames('sin_', harmonicFrequencies);

// Independent variables.
var independents = ee.List(['constant', 't'])
  .cat(cosNames).cat(sinNames);

// Function to mask clouds in Landsat 8 imagery.
// var maskClouds = function(image) {
//   var score = ee.Algorithms.Landsat.simpleCloudScore(image).select('cloud');
//   var mask = score.lt(10);
//   return image.updateMask(mask);
// };

// Function to add an NDVI band, the dependent variable.
var addNDVI = function(image) {
  return image
    .addBands(image.normalizedDifference(['B5', 'B4'])
    .rename('NDVI'))
    .float();
};

// Function to add a time band.
var addDependents = function(image) {
  // Compute time in fractional years since the epoch.
  var years = image.date().difference('1970-01-01', 'year');
  var timeRadians = ee.Image(years.multiply(2 * Math.PI)).rename('t');
  var constant = ee.Image(1);
  return image.addBands(constant).addBands(timeRadians.float());
};

// Function to compute the specified number of harmonics
// and add them as bands.  Assumes the time band is present.
var addHarmonics = function(freqs) {
  return function(image) {
    // Make an image of frequencies.
    var frequencies = ee.Image.constant(freqs);
    // This band should represent time in radians.
    var time = ee.Image(image).select('t');
    // Get the cosine terms.
    var cosines = time.multiply(frequencies).cos().rename(cosNames);
    // Get the sin terms.
    var sines = time.multiply(frequencies).sin().rename(sinNames);
    return image.addBands(cosines).addBands(sines);
  };
};

// Filter to the area of interest, mask clouds, add variables.
var harmonicLandsat = landsatCollection
  .filterBounds(roi)
  // .map(maskClouds)
  .map(addNDVI)
  .map(addDependents)
  .map(addHarmonics(harmonicFrequencies));

// The output of the regression reduction is a 4x1 array image.
var harmonicTrend = harmonicLandsat
  .select(independents.add(dependent))
  .reduce(ee.Reducer.linearRegression(independents.length(), 1));

// Turn the array image into a multi-band image of coefficients.
var harmonicTrendCoefficients = harmonicTrend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([independents]);

// Compute fitted values.
var fittedHarmonic = harmonicLandsat.map(function(image) {
  return image.addBands(
    image.select(independents)
      .multiply(harmonicTrendCoefficients)
      .reduce('sum')
      .rename('fitted'));
});

// Plot the fitted model and the original data at the ROI.
print(ui.Chart.image.series(fittedHarmonic.select(['fitted','NDVI']), roi, ee.Reducer.mean(), 30)
    .setOptions({
      title: 'Harmonic model: original and fitted values',
      lineWidth: 1,
      pointSize: 3,
      height: 500
}));

// Pull out the three bands we're going to visualize.
var sin = harmonicTrendCoefficients.select('sin_1');
var cos = harmonicTrendCoefficients.select('cos_1');

// Do some math to turn the first-order Fourier model into
// hue, saturation, and value in the range[0,1].
var magnitude = cos.hypot(sin).multiply(5);
var phase = sin.atan2(cos).unitScale(-Math.PI, Math.PI);
var val = harmonicLandsat.select('NDVI').reduce('mean');

// Turn the HSV data into an RGB image and add it to the map.
var seasonality = ee.Image.cat(phase, magnitude, val).hsvToRgb();
Map.centerObject(roi, 11);
Map.addLayer(seasonality, {}, 'Seasonality',false);
Map.addLayer(roi, {}, 'ROI',false);
