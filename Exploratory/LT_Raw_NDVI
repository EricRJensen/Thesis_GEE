// date: 2018-04-19
// author: Zhiqiang Yang  | zhiqiang.yang@oregonstate.edu
//         Justin Braaten | jstnbraaten@gmail.com
//         Robert Kennedy | rkennedy@coas.oregonstate.edu
// website: https://github.com/eMapR/LT-GEE

//########################################################################################################
//##### INPUTS ##### 
//########################################################################################################
// define a geometry - there are lots of ways to do this, see the GEE User guide
//var geometry = ee.FeatureCollection('ft:10uDvL5YjRQGjtZZhHWUx9fn8Ijd0HMu7IZuULxSj')
//var aoi = geometry; // should be a GEE geometry object - here we are getting it from an drawn polygon

var test_roi = ee.FeatureCollection('users/ericjensen41_default/Thesis/Project_Boundaries/LIIIGBBoundary');

exports.doc = 'These are functions to run LandTrendr';
var ltgee = require('users/emaprlab/public:Modules/LandTrendr.js');
var aoi = test_roi;

// define years and dates to include in landsat image collection
var startYear  = 2010;    // what year do you want to start the time series 
var endYear    = 2018;    // what year do you want to end the time series
var startDay   = '04-01'; // what is the beginniing of date filter | month-day
var endDay     = '05-31'; // what is the end of date filter | month-day

var NDVI = 'NDVI';
var ftvList1 = ['NDVI'];
var B1 = 'B1';
var ftvList2 = ['B1'];
var B2 = 'B2';
var ftvList3 = ['B2'];
var B3 = 'B3';
var ftvList4 = ['B3'];
var B4 = 'B4';
var ftvList5 = ['B4'];
var B5 = 'B5';
var ftvList6 = ['B5'];
var B7 = 'B7';
var ftvList7 = ['B7'];


// define the segmentation parameters:
// reference: Kennedy, R. E., Yang, Z., & Cohen, W. B. (2010). Detecting trends in forest disturbance and recovery using yearly Landsat time series: 1. LandTrendrâ€”Temporal segmentation algorithms. Remote Sensing of Environment, 114(12), 2897-2910.
//            https://github.com/eMapR/LT-GEE
var run_params = { 
  maxSegments:            6,
  spikeThreshold:         0.9,
  vertexCountOvershoot:   3,
  preventOneYearRecovery: true,
  recoveryThreshold:      0.25,
  pvalThreshold:          0.05,
  bestModelProportion:    0.75,
  minObservationsNeeded:  6
};
//########################################################################################################


//########################################################################################################
//##### ANNUAL SR TIME SERIES COLLECTION BUILDING FUNCTIONS ##### 
//########################################################################################################

//----- MAKE A DUMMY COLLECTOIN FOR FILLTING MISSING YEARS -----
var dummyCollection = ee.ImageCollection([ee.Image([0,0,0,0,0,0]).mask(ee.Image(0))]); // make an image collection from an image with 6 bands all set to 0 and then make them masked values

//------ L8 to L7 HARMONIZATION FUNCTION -----
// slope and intercept citation: Roy, D.P., Kovalskyy, V., Zhang, H.K., Vermote, E.F., Yan, L., Kumar, S.S, Egorov, A., 2016, Characterization of Landsat-7 to Landsat-8 reflective wavelength and normalized difference vegetation index continuity, Remote Sensing of Environment, 185, 57-70.(http://dx.doi.org/10.1016/j.rse.2015.12.024); Table 2 - reduced major axis (RMA) regression coefficients
var harmonizationRoy = function(oli) {
  var slopes = ee.Image.constant([0.9785, 0.9542, 0.9825, 1.0073, 1.0171, 0.9949]);        // create an image of slopes per band for L8 TO L7 regression line - David Roy
  var itcp = ee.Image.constant([-0.0095, -0.0016, -0.0022, -0.0021, -0.0030, 0.0029]);     // create an image of y-intercepts per band for L8 TO L7 regression line - David Roy
  var y = oli.select(['B2','B3','B4','B5','B6','B7'],['B1', 'B2', 'B3', 'B4', 'B5', 'B7']) // select OLI bands 2-7 and rename them to match L7 band names
             .resample('bicubic')                                                          // ...resample the L8 bands using bicubic
             .subtract(itcp.multiply(10000)).divide(slopes)                                // ...multiply the y-intercept bands by 10000 to match the scale of the L7 bands then apply the line equation - subtract the intercept and divide by the slope
             .set('system:time_start', oli.get('system:time_start'));                      // ...set the output system:time_start metadata to the input image time_start otherwise it is null
  return y.toShort();                                                                       // return the image as short to match the type of the other data
};


//------ RETRIEVE A SENSOR SR COLLECTION FUNCTION -----
var getSRcollection = function(year, startDay, endDay, sensor, aoi) {
  // get a landsat collection for given year, day range, and sensor
  var srCollection = ee.ImageCollection('LANDSAT/'+ sensor + '/C01/T1_SR') // get surface reflectance images
                       .filterBounds(aoi)                                  // ...filter them by intersection with AOI
                       .filterDate(year+'-'+startDay, year+'-'+endDay);    // ...filter them by year and day range

  // apply the harmonization function to LC08 (if LC08), subset bands, unmask, and resample           
  srCollection = srCollection.map(function(img) {
    var dat = ee.Image(
      ee.Algorithms.If(
        sensor == 'LC08',                                                  // condition - if image is OLI
        harmonizationRoy(img.unmask()),                                    // true - then apply the L8 TO L7 alignment function after unmasking pixels that were previosuly masked (why/when are pixels masked)
        img.select(['B1', 'B2', 'B3', 'B4', 'B5', 'B7'])                   // false - else select out the reflectance bands from the non-OLI image
           .unmask()                                                       // ...unmask any previously masked pixels 
           .resample('bicubic')                                            // ...resample by bicubic 
           .set('system:time_start', img.get('system:time_start'))         // ...set the output system:time_start metadata to the input image time_start otherwise it is null
      )
    );

    // make a cloud, cloud shadow, and snow mask from fmask band
    var qa = img.select('pixel_qa');                                       // select out the fmask band
    var mask = qa.bitwiseAnd(8).eq(0).and(                                 // include shadow
               qa.bitwiseAnd(16).eq(0)).and(                               // include snow
               qa.bitwiseAnd(32).eq(0));                                   // include clouds
    
    // apply the mask to the image and return it
    return dat.mask(mask); //apply the mask - 0's in mask will be excluded from computation and set to opacity=0 in display
  });

  return srCollection; // return the prepared collection
};

//------ FUNCTION TO COMBINE LT05, LE07, & LC08 COLLECTIONS -----
var getCombinedSRcollection = function(year, startDay, endDay, aoi) {
    var lt5 = getSRcollection(year, startDay, endDay, 'LT05', aoi);       // get TM collection for a given year, date range, and area
    // var le7 = getSRcollection(year, startDay, endDay, 'LE07', aoi);       // get ETM+ collection for a given year, date range, and area
    var lc8 = getSRcollection(year, startDay, endDay, 'LC08', aoi);       // get OLI collection for a given year, date range, and area
    var mergedCollection = ee.ImageCollection(lt5.merge(lc8)); // merge the individual sensor collections into one imageCollection object
    return mergedCollection;                                              // return the Imagecollection
};

//------ FUNCTION TO REDUCE COLLECTION TO SINGLE IMAGE PER YEAR BY MEDOID -----
/*
  LT expects only a single image per year in a time series, there are lost of ways to
  do best available pixel compositing - we have found that a mediod composite requires little logic
  is robust, and fast
  
  Medoids are representative objects of a data set or a cluster with a data set whose average 
  dissimilarity to all the objects in the cluster is minimal. Medoids are similar in concept to 
  means or centroids, but medoids are always members of the data set.
*/
// make a medoid composite with equal weight among indices
var medoidMosaic = function(inCollection, dummyCollection) {
  
  // fill in missing years with the dummy collection
  var imageCount = inCollection.toList(1).length();                                                            // get the number of images 
  var finalCollection = ee.ImageCollection(ee.Algorithms.If(imageCount.gt(0), inCollection, dummyCollection)); // if the number of images in this year is 0, then use the dummy collection, otherwise use the SR collection
  
  // calculate median across images in collection per band
  var median = finalCollection.median();                                                                       // calculate the median of the annual image collection - returns a single 6 band image - the collection median per band
  
  // calculate the different between the median and the observation per image per band
  var difFromMedian = finalCollection.map(function(img) {
    var diff = ee.Image(img).subtract(median).pow(ee.Image.constant(2));                                       // get the difference between each image/band and the corresponding band median and take to power of 2 to make negatives positive and make greater differences weight more
    return diff.reduce('sum').addBands(img);                                                                   // per image in collection, sum the powered difference across the bands - set this as the first band add the SR bands to it - now a 7 band image collection
  });
  
  // get the medoid by selecting the image pixel with the smallest difference between median and observation per band 
  return ee.ImageCollection(difFromMedian).reduce(ee.Reducer.min(7)).select([1,2,3,4,5,6], ['B1','B2','B3','B4','B5','B7']); // find the powered difference that is the least - what image object is the closest to the median of teh collection - and then subset the SR bands and name them - leave behind the powered difference band
};

//------ FUNCTION TO APPLY MEDOID COMPOSITING FUNCTION TO A COLLECTION -------------------------------------------
var buildMosaic = function(year, startDay, endDay, aoi, dummyCollection) {                                                                      // create a temp variable to hold the upcoming annual mosiac
  var collection = getCombinedSRcollection(year, startDay, endDay, aoi);  // get the SR collection
  var img = medoidMosaic(collection, dummyCollection)                     // apply the medoidMosaic function to reduce the collection to single image per year by medoid 
              .set('system:time_start', (new Date(year,8,1)).valueOf());  // add the year to each medoid image - the data is hard-coded Aug 1st 
  return ee.Image(img);                                                   // return as image object
};

//------ FUNCTION TO BUILD ANNUAL MOSAIC COLLECTION ------------------------------
var buildMosaicCollection = function(startYear, endYear, startDay, endDay, aoi, dummyCollection) {
  var imgs = [];                                                                    // create empty array to fill
  for (var i = startYear; i <= endYear; i++) {                                      // for each year from hard defined start to end build medoid composite and then add to empty img array
    var tmp = buildMosaic(i, startDay, endDay, aoi, dummyCollection);               // build the medoid mosaic for a given year
    imgs = imgs.concat(tmp.set('system:time_start', (new Date(i,8,1)).valueOf()));  // concatenate the annual image medoid to the collection (img) and set the date of the image - hard coded to the year that is being worked on for Aug 1st
  }
  return ee.ImageCollection(imgs);                                                  // return the array img array as an image collection
};

//########################################################################################################
//##### UNPACKING LT-GEE OUTPUT STRUCTURE FUNCTIONS ##### 
//########################################################################################################
// ----- FUNCTION TO EXTRACT VERTICES FROM LT RESULTS AND STACK BANDS -----
var getLTvertStack = function(LTresult) {
  var emptyArray = [];                              // make empty array to hold another array whose length will vary depending on maxSegments parameter    
  var vertLabels = [];                              // make empty array to hold band names whose length will vary depending on maxSegments parameter 
  var iString;                                      // initialize variable to hold vertex number
  for(var i=1;i<=run_params.maxSegments+1;i++){     // loop through the maximum number of vertices in segmentation and fill empty arrays
    iString = i.toString();                         // define vertex number as string 
    vertLabels.push("vert_"+iString);               // make a band name for given vertex
    emptyArray.push(0);                             // fill in emptyArray
  }
  
  var zeros = ee.Image(ee.Array([emptyArray,        // make an image to fill holes in result 'LandTrendr' array where vertices found is not equal to maxSegments parameter plus 1
                                 emptyArray,
                                 emptyArray]));
  
  var lbls = [['yrs_','src_','fit_'], vertLabels,]; // labels for 2 dimensions of the array that will be cast to each other in the final step of creating the vertice output 

  var vmask = LTresult.arraySlice(0,3,4);           // slices out the 4th row of a 4 row x N col (N = number of years in annual stack) matrix, which identifies vertices - contains only 0s and 1s, where 1 is a vertex (referring to spectral-temporal segmentation) year and 0 is not
  
  var ltVertStack = LTresult.arrayMask(vmask)       // uses the sliced out isVert row as a mask to only include vertice in this data - after this a pixel will only contain as many "bands" are there are vertices for that pixel - min of 2 to max of 7. 
                      .arraySlice(0, 0, 3)          // ...from the vertOnly data subset slice out the vert year row, raw spectral row, and fitted spectral row
                      .addBands(zeros)              // ...adds the 3 row x 7 col 'zeros' matrix as a band to the vertOnly array - this is an intermediate step to the goal of filling in the vertOnly data so that there are 7 vertice slots represented in the data - right now there is a mix of lengths from 2 to 7
                      .toArray(1)                   // ...concatenates the 3 row x 7 col 'zeros' matrix band to the vertOnly data so that there are at least 7 vertice slots represented - in most cases there are now > 7 slots filled but those will be truncated in the next step
                      .arraySlice(1, 0, run_params.maxSegments+1) // ...before this line runs the array has 3 rows and between 9 and 14 cols depending on how many vertices were found during segmentation for a given pixel. this step truncates the cols at 7 (the max verts allowed) so we are left with a 3 row X 7 col array
                      .arrayFlatten(lbls, '');      // ...this takes the 2-d array and makes it 1-d by stacking the unique sets of rows and cols into bands. there will be 7 bands (vertices) for vertYear, followed by 7 bands (vertices) for rawVert, followed by 7 bands (vertices) for fittedVert, according to the 'lbls' list

  return ltVertStack;                               // return the stack
};

///////////////////////////////////////////////////////////////////////////////////////////
////    BUILD ANNUAL IMAGE COLLECTION TO ASSESS UNFITTED DATA COVERAGE   /////////////////
/////////////////////////////////////////////////////////////////////////////////////////

var annualSRcollection = ltgee.buildSRcollection(startYear, endYear, startDay, endDay, aoi);
var annualLTcollection1 = ltgee.buildLTcollection(annualSRcollection, NDVI, ftvList1);
var annualLTcollection2 = ltgee.buildLTcollection(annualSRcollection, B1, ftvList2);
var annualLTcollection3 = ltgee.buildLTcollection(annualSRcollection, B2, ftvList3);
var annualLTcollection4 = ltgee.buildLTcollection(annualSRcollection, B3, ftvList4);
var annualLTcollection5 = ltgee.buildLTcollection(annualSRcollection, B4, ftvList5);
var annualLTcollection6 = ltgee.buildLTcollection(annualSRcollection, B5, ftvList6);
var annualLTcollection7 = ltgee.buildLTcollection(annualSRcollection, B7, ftvList7);

print(annualSRcollection,'annualSRcollection')
print(annualLTcollection1,'annualLTcollection')
print(annualLTcollection2,'annualLTcollection')
print(annualLTcollection3,'annualLTcollection')
print(annualLTcollection4,'annualLTcollection')
print(annualLTcollection5,'annualLTcollection')
print(annualLTcollection6,'annualLTcollection')
print(annualLTcollection7,'annualLTcollection')

///////////////////////////////////////////////////////////////////////////////////////////
//////////////////////// Checking coverage of unfitted images ////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

//// Turn the annualLT image collection (harmonized, calibrated, cloud masked, mediod composites) into a list to select each image and display each on the map.
//// This is a visual method to identify years of concern and see which years LT has to fill in gaps, or check for multiyear gaps causing trend anomolies in an area.
//// In this case, TCB is being used to identify gaps in the unfitted data.

var ndvi_u = annualLTcollection1.select(0)
print(ndvi_u,'ndvi_u')

var listOfImages = annualLTcollection1.toList(annualLTcollection1.size());

var check17 = ee.Image(listOfImages.get(8)).select("NDVI")

var mergeBands = function(image, previous) {
  return ee.Image(previous).addBands(image);
};
var NDVI_unfit = ndvi_u.iterate(mergeBands, ee.Image([]));
print(NDVI_unfit,'NDVI_unfit')

Map.addLayer(check17, {}, 'check2017')



///////////////////////////////////////////////////////////////////////////////////////////
////       *  *  *  *  *    RUN LANDTRENDR SEGMENTATION AND FIT   *  *  *  *  *       ////
/////////////////////////////////////////////////////////////////////////////////////////
// var lt1 = ltgee.runLT(startYear, endYear, startDay, endDay, aoi, index1, ftvList1, run_params);
// var lt2 = ltgee.runLT(startYear, endYear, startDay, endDay, aoi, index2, ftvList2, run_params);
// var lt3 = ltgee.runLT(startYear, endYear, startDay, endDay, aoi, index3, ftvList3, run_params);
// var lt4 = ltgee.runLT(startYear, endYear, startDay, endDay, aoi, index4, ftvList4, run_params);

// var tcbFTV = ltgee.getFittedData(lt1, startYear, endYear, ftvList1[0]);
// var tcgFTV = ltgee.getFittedData(lt2, startYear, endYear, ftvList2[0]);
// var tcwFTV = ltgee.getFittedData(lt3, startYear, endYear, ftvList3[0]);
// var tcaFTV = ltgee.getFittedData(lt4, startYear, endYear, ftvList4[0]);
// print(tcbFTV);
// print(tcgFTV);
// print(tcwFTV);
// print(tcaFTV);

// Map.addLayer(tcgFTV.select('1985'),{},'tcg1985_fit');
// Map.addLayer(tcgFTV.select('2001'),{},'tcg2001_fit');
// Map.addLayer(tcgFTV.select('2008'),{},'tcg2008_fit');
// var TCG_fit_test3 = tcgFTV.select('1985');

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////         Select fitted composite from each year, clip to ROI, convert to 16-bit signed integer         ////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// var TCB_1984 = tcbFTV.select('1984').clip(test_roi).toInt16();
// var TCB_1985 = tcbFTV.select('1985').clip(test_roi).toInt16();
// var TCB_1986 = tcbFTV.select('1986').clip(test_roi).toInt16();
// var TCB_1987 = tcbFTV.select('1987').clip(test_roi).toInt16();
// var TCB_1988 = tcbFTV.select('1988').clip(test_roi).toInt16();
// var TCB_1989 = tcbFTV.select('1989').clip(test_roi).toInt16();
// var TCB_1990 = tcbFTV.select('1990').clip(test_roi).toInt16();
// var TCB_1991 = tcbFTV.select('1991').clip(test_roi).toInt16();
// var TCB_1992 = tcbFTV.select('1992').clip(test_roi).toInt16();
// var TCB_1993 = tcbFTV.select('1993').clip(test_roi).toInt16();
// var TCB_1994 = tcbFTV.select('1994').clip(test_roi).toInt16();
// var TCB_1995 = tcbFTV.select('1995').clip(test_roi).toInt16();
// var TCB_1996 = tcbFTV.select('1996').clip(test_roi).toInt16();
// var TCB_1997 = tcbFTV.select('1997').clip(test_roi).toInt16();
// var TCB_1998 = tcbFTV.select('1998').clip(test_roi).toInt16();
// var TCB_1999 = tcbFTV.select('1999').clip(test_roi).toInt16();
// var TCB_2000 = tcbFTV.select('2000').clip(test_roi).toInt16();
// var TCB_2001 = tcbFTV.select('2001').clip(test_roi).toInt16();
// var TCB_2002 = tcbFTV.select('2002').clip(test_roi).toInt16();
// var TCB_2003 = tcbFTV.select('2003').clip(test_roi).toInt16();
// var TCB_2004 = tcbFTV.select('2004').clip(test_roi).toInt16();
// var TCB_2005 = tcbFTV.select('2005').clip(test_roi).toInt16();
// var TCB_2006 = tcbFTV.select('2006').clip(test_roi).toInt16();
// var TCB_2007 = tcbFTV.select('2007').clip(test_roi).toInt16();
// var TCB_2008 = tcbFTV.select('2008').clip(test_roi).toInt16();
// var TCB_2009 = tcbFTV.select('2009').clip(test_roi).toInt16();
// var TCB_2010 = tcbFTV.select('2010').clip(test_roi).toInt16();
// var TCB_2011 = tcbFTV.select('2011').clip(test_roi).toInt16();
// var TCB_2012 = tcbFTV.select('2012').clip(test_roi).toInt16();
// var TCB_2013 = tcbFTV.select('2013').clip(test_roi).toInt16();
// var TCB_2014 = tcbFTV.select('2014').clip(test_roi).toInt16();
// var TCB_2015 = tcbFTV.select('2015').clip(test_roi).toInt16();
// var TCB_2016 = tcbFTV.select('2016').clip(test_roi).toInt16();
// var TCB_2017 = tcbFTV.select('2017').clip(test_roi).toInt16();
// var TCB_2018 = tcbFTV.select('2018').clip(test_roi).toInt16();

// print(TCB_2014,'TCB_2014')
// print(TCG_1999,'TCG_1999')
// // var TCG_2014 = TCG_2014.toInt16()
// // print(TCG_2014,'toINT16')
// Map.addLayer(TCG_2013,{},'TCG_2013_fitted')

////////////////////////////////////////////////////
////   ########   EXPORT COMMANDS   ########   ////
//////////////////////////////////////////////////

///////////////////////////////////////
////////////  TCB   //////////////////
/////////////////////////////////////

/*Export.image.toDrive({
  image: check13,
  description: 'NDVI_2013',
  region: test_roi,
  maxPixels: 1e13,
  crs: 'EPSG:26915',
  scale: 30
});*/

// Export.image.toDrive({
//   image: check14,
//   description: 'NDVI_2014',
//   region: test_roi,
//   maxPixels: 1e13,
//   crs: 'EPSG:26915',
//   scale: 30
  
// });
// Export.image.toDrive({
//   image: check15,
//   description: 'NDVI_2015',
//   region: test_roi,
//   maxPixels: 1e13,
//   crs: 'EPSG:26915',
//   scale: 30
// });

// Export.image.toDrive({
//   image: check16,
//   description: 'NDVI_2016',
//   region: test_roi,
//   maxPixels: 1e13,
//   crs: 'EPSG:26915',
//   scale: 30
// });

// Export.image.toDrive({
//   image: check17,
//   description: 'NDVI_2017',
//   region: test_roi,
//   maxPixels: 1e13,
//   crs: 'EPSG:26915',
//   scale: 30
// });
