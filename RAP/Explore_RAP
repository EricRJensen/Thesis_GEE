/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var AIMplots = ee.FeatureCollection("users/ericjensen41_default/Thesis/Plots/Allplots"),
    Fires = ee.FeatureCollection("users/ericjensen41_default/Thesis/Chapter2/FirePolygons/Fires_BurnedOnce"),
    Aerial = ee.FeatureCollection("users/ericjensen41_default/Thesis/Chapter2/TreatmentPolygons/LTDL_AerialSeed"),
    Drill = ee.FeatureCollection("users/ericjensen41_default/Thesis/Chapter2/TreatmentPolygons/LTDL_DrillSeed"),
    Unburned = ee.FeatureCollection("users/ericjensen41_default/Thesis/Chapter2/FirePolygons/Fires_Unburned"),
    MTOnce = ee.FeatureCollection("users/ericjensen41_default/Thesis/Chapter2/FirePolygons/Fires_BurnedMTOnce"),
    GBbounds = ee.FeatureCollection("users/ericjensen41_default/Thesis/Project_Boundaries/GBbounds");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var jensen = AIMplots.filterMetadata('Program', 'equals', 'Jensen')
var Seeded = Drill.merge(Aerial) 


// var Severity = ee.ImageCollection([BilkSev, BigJuniperSev, SadlerSev, ShirttailSev, TuanaSev]).mosaic()


//  ---------------- Preprocess --------------------
var RAP = ee.ImageCollection("projects/rangeland-analysis-platform/vegetation-cover-v2")
  // .select(['AFGC', 'PFGC', 'SHR', 'TREE']);

// Calculate normalized differenced index and add band
// Perennial - annual / perennial + annual // Note: Excluding trees
var calc_normdif = function(img){
  var per = img.select('PFGC').add(img.select('SHR')).rename('PER') // Add band for perennials
  var img_wPer = img.addBands(per)
  var normdif = img_wPer.normalizedDifference(['PER', 'AFGC']).multiply(100).rename('NDPDI') // calculate normalized difference perennial dominance index
  var img_yr = img.get('year')
  var yearband = ee.Image.constant(img_yr).toFloat().rename("Year")
  return(img_wPer.addBands(normdif).addBands(yearband))
}
var RAP = RAP.map(calc_normdif)




// -------------------------------------------------------------
// --------- Investigate Specific fires--------------------

// ------------ Generate Pre- and Post-fire layers -------------


// Fire names are:
// 'TUANA COMPLEX' (1995)
// 'BILK CREEK COMPLEX (DOUBLE H)' (2000)
// 'SHIRTTAIL' (1999)
// 'SADLER COMPLEX' (1999)
// 'BIG JUNIPER' (2001)

// Select the desired fire and extact objects for script to run
var Fire = Fires.filterMetadata('Fire_Name', 'equals', 'BILK CREEK COMPLEX (DOUBLE H)')
var FireGeom = Fire.first().geometry().buffer(2000)
var FireYear = ee.Number(Fire.first().get('Year'))
var FireYearStr = ee.String(Fire.first().get('Year'))
print('The year of the fire was', FireYear)


// Calculate pre-fire and post-fire images and recovery images
var NDPDI_pre = RAP.select('NDPDI')
            .filterDate(ee.String(FireYear.subtract(4)).cat('-01-01'), ee.String(FireYear.subtract(1)).cat('-01-01')) // Three years prior to fire // no pixels burned in three years leading up to any fires
            .toBands()
            .reduce(ee.Reducer.median()) 
var NDPDI_post = RAP.select('NDPDI').filterDate('2015-01-01', '2020-01-01').toBands().reduce(ee.Reducer.median()) // Five most recent years
var NDPDI_recov = NDPDI_post.divide(NDPDI_pre) // Percent recovery of NDPDI

// Generate recovery slopes for the fire and summarize slopes by treatment polygons
var postfire = RAP.filterMetadata('year', 'greater_than', ee.Number(FireYear))

var NDPDI_slope = postfire.select(['Year', 'NDPDI']).reduce(ee.Reducer.linearFit()).select('scale')



// -------- Calculate Time-series plots of recovery for entire RAP collection -----------
// Prep unseeded image collection
var maskInside = function(image) {
  var mask = ee.Image.constant(1).clip(Seeded).mask().not()
  return image.updateMask(mask)
}
var unseeded_IC = RAP.map(maskInside)

// Clip to Fire Geometry
var clipToFire = function(img){
 return(img.clip(FireGeom)) 
}

var drill_IC = RAP.map(clipToFire)
var aerial_IC = RAP.map(clipToFire)
var unseeded_IC = unseeded_IC.map(clipToFire)

// Clip drill and aerial to respective feature collections
var aerial_IC = aerial_IC.map(function(img){
  return img.clip(Aerial)
})
var drill_IC = drill_IC.map(function(img){
  return img.clip(Drill)
})



// print(ui.Chart.image.series(drill_IC.select(['NDPDI', 'AFGC', 'PER']), FireGeom, ee.Reducer.mean(), 30), 'Drill seeded')
// print(ui.Chart.image.series(aerial_IC.select(['NDPDI', 'AFGC', 'PER']), FireGeom, ee.Reducer.mean(), 30), 'Aerial seeded')
// print(ui.Chart.image.series(unseeded_IC.select(['NDPDI', 'AFGC', 'PER']), FireGeom, ee.Reducer.mean(), 30), 'Unseeded')



// ------------- Generate histograms of NDPDI slopes along seeding types --------------------------
//Get the seeding types
var drill = NDPDI_slope.clip(Drill)
var aerial = NDPDI_slope.clip(Aerial)
var unseeded = maskInside(NDPDI_slope, Seeded).clip(FireGeom)


// Print the charts
// Visualization parameters for charts
  var options = {
    title: 'NDPDI Slopes',
    hAxis: {
      viewWindowMode: 'explicit',
      viewWindow: {
        min:-5,
        max: 5    }}};

// print(ui.Chart.image.histogram({image:drill, region:FireGeom, scale:30}).setOptions(options), "NDPDI_Drill");
// print(ui.Chart.image.histogram({image:aerial, region:FireGeom, scale:30}).setOptions(options), "NDPDI_Aerial");
// print(ui.Chart.image.histogram({image:unseeded, region:FireGeom, scale:30}).setOptions(options), "NDPDI_Unseeded");



var cheatgrass = ee.Feature(RAP.select('AFGC').toBands().clip(GBbounds).reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: GBbounds.geometry(),
  scale:30,
  maxPixels: 1e13}))

print(cheatgrass)

Export.table.toDrive({
  collection: ee.FeatureCollection([cheatgrass]),
  description:'AFGC_rr',
  fileFormat: 'CSV'
});













// ---------- Visualize the Bilk Fire analysis ---------------
// Fire data
var visParams = {min: 1, max:4, palette: ['f6ff6e','e4ff06','ffa90c','ff0202']} //Severity visParams
// Map.addLayer(Severity, visParams, 'Severity Class')

// Map different recovery characteristics
Map.addLayer(NDPDI_pre.clip(FireGeom), {min:-100, max:100, palette: ['brown', 'white', 'green']}, 'NDPDI Prefire')
Map.addLayer(NDPDI_post.clip(FireGeom), {min:-100, max:100, palette: ['brown', 'white', 'green']}, 'NDPDI Postfire',false)
Map.addLayer(NDPDI_recov.clip(FireGeom), {min:-5, max:5, palette: ['brown', 'white', 'green']}, 'NDPDI recov',false)
Map.addLayer(NDPDI_slope.clip(FireGeom), {min:-5, max:5, palette: ['brown', 'white', 'green']}, 'NDPDI slope',false)

// Treatment polygons
Map.addLayer(Aerial, {color: 'green'}, 'Aerial seeding',false)
Map.addLayer(Drill, {color: 'blue'}, 'Drill seeding',false)

// View AIM plots in the Bilk Creek Fire
Map.addLayer(AIMplots.filterBounds(Fires), {}, 'Fire AIM plots', false)
Map.addLayer(MTOnce, {}, 'MTOnce')
Map.addLayer(Fire, {}, 'Fire')
Map.addLayer(Unburned, {}, 'Unburned')











//  ---------------- Export Data --------------------
// Export CSVs of NDPDI, perennials, and annuals for Jensen plots
// var NDPDI_rr = RAP.select('NDPDI').toBands().reduceRegions({
//   collection: jensen,
//   reducer: ee.Reducer.mean(),
//   scale: 30,
// });

// var AFGC_rr = RAP.select('AFGC').toBands().reduceRegions({
//   collection: jensen,
//   reducer: ee.Reducer.mean(),
//   scale: 30,
// });

// var PER_rr = RAP.select('PER').toBands().reduceRegions({
//   collection: jensen,
//   reducer: ee.Reducer.mean(),
//   scale: 30,
// });


// Export.table.toDrive({
//   collection: NDPDI_rr,
//   description:'NDPDI_rr',
//   fileFormat: 'CSV'
// });

// Export.table.toDrive({
//   collection: PER_rr,
//   description:'PER_rr',
//   fileFormat: 'CSV'
// });

// Export.table.toDrive({
//   collection: AFGC_rr,
//   description:'AFGC_rr',
//   fileFormat: 'CSV'
// });
